---
- name: Enforce Minimum Ansible version
  ansible.builtin.assert:
    that:
      - ansible_version.full is version('2.14', '>=')
    msg: "Minimum ansible-core version required is 2.14"

- name: Install Ubuntu Packages
  when: ansible_distribution in ['Ubuntu']
  ansible.builtin.apt:
    name: policycoreutils  # Used by install script to restore SELinux context
    update_cache: true

- name: Enable IPv4 Forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true

- name: Enable IPv6 Forwarding
  when: ansible_all_ipv6_addresses
  ansible.posix.sysctl:
      name: net.ipv6.conf.all.forwarding
      value: "1"
      state: present
      reload: true

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Allow UFW Exceptions
  when:
    - ansible_facts.services['ufw'] is defined
    - ansible_facts.services['ufw'].state == ''running'
  block:
    - name: Get ufw status
      ansible.builtin.command:
        cmd: ufw status
      changed_when: false
      register: ufw_status

    - name: Open api port
      when:
        - ufw_status['stdout'] == "Status':' active"
      community.general.ufw:
        rule: allow
        port: "{{ api_port }}"
        proto: tcp

    - name: Open etcd ports
      when:
        - ufw_status['stdout'] == "Status':' active"
        - groups['server'] | length > 1
      community.general.ufw:
        rule: allow
        port: "2379:2381"
        proto: tcp
    - name: Allow default CIDR ranges
      when:
        - ufw_status['stdout'] == "Status':' active"
      community.general.ufw:
        rule: allow
        src: '{{ item }}'
      loop: "{{ (cluster_cidr + ',' + service_cidr) | split(',') }}"

- name: Allow Firewalld Exceptions
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
  block:
    - name: Open api ports
      ansible.posix.firewalld:
        port: "{{ api_port }}/tcp"
        zone: trusted
        state: enabled
        permanent: true
        immediate: true
    
    - name: Open etcd ports
      when: groups['server'] | length > 1
      ansible.posix.firewalld:
        port: "2379-2381/tcp"
        zone: trusted
        state: enabled
        permanent: true
        immediate: true
        
    - name: Allow default CIDR ranges
      ansible.posix.firewalld:
        source: "{{ item }}"
        zone: trusted
        state: enabled
        permanent: true
        immediate: true
      loop: "{{ (cluster_cidr + ',' + service_cidr) | split(',') }}"

- name: Check for Apparmor existence
  ansible.builtin.stat:
    path: /sys/module/apparmor/parameters/enabled
  register: apparmor_enabled

- name: Check for Apparmor
  when: apparmor_enabled.stat.exists
  ansible.builtin.command: cat /sys/module/apparmor/parameters/enabled
  register: apparmor_status
  changed_when: false

- name: Install Apparmor Parser
  when:
    - ansible_distribution == 'Debian'
    - ansible_facts['distribution_major_version'] == "11"
    - apparmor_status is defined
    - apparmor_status.stdout == "Y"
  ansible.builtin.package:
    name: apparmor
    state: present

- name: Gather the package facts 
  ansible.builtin.package_facts:
    manager: auto

- name: Setup User defined k3s Directory
  when:
    - k3s_server_location is defined
    - k3s_server_location != "/var/lib/rancher/k3s"
  block:
    - name: Create Rancher directory
      ansible.builtin.file:
        path: "/var/lib/rancher"
        mode: 0755
        state: directory
    - name: Create symlink
      ansible.builtin.file:
        dest: /var/lib/rancher/k3s
        src: "{{ k3s_server_location }}"
        force: true
        state: link

- name: Setup Extra manifests
  when: extra_manifests is defined
  block:
    - name: Create manifests directory
      ansible.builtin.file:
        path: "/var/lib/rancher/k3s/server/manifests"
        mode: 0700
        state: directory
    - name: Copy custom manifests
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/var/lib/rancher/k3s/server/manifests"
        mode: 0600
      loop: "{{ extra_manifests }}"

- name: Setup User defined Registry
  when: registries_config_yaml is defined
  block:
    - name: Create k3s config directory
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        mode: 0755
        state: directory
    - name: Copy Private registry values
      ansible.builtin.copy:
        content: "{{ registries_config_yaml }}"
        dest: "/etc/rancher/k3s/registries.yaml"
        mode: 0644

# Storage Stuff
#- name: Check if storage directory exists
#  ansible.builtin.file:
#    path: /mnt/storage
#    state: directory
#    become: true
    
#- name: Ensure NFS share is mounted
#  ansible.posix.mount:
#    path: /mnt/storage
#    src: "{{ nfs_mount }}"
#    fstype: nfs
#    opts: defaults
#    state: mounted
#  become: true
#  when: nfs_mount is defined